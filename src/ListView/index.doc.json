{
  "fileName": "D:/react-uwp/src/ListView/index.tsx",
  "name": "\"D:/react-uwp/src/ListView/index\"",
  "exports": [
    {
      "name": "ListItem",
      "documentation": ""
    },
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "ListViewProps",
      "documentation": ""
    },
    {
      "name": "ListViewState",
      "documentation": ""
    },
    {
      "name": "ListView",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "ListView"
      ]
    }
  ],
  "members": [
    {
      "name": "ListItem",
      "members": [
        {
          "name": "itemNode",
          "documentation": "",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "disabled",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "focus",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "style",
          "documentation": "",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "onClick",
          "documentation": "",
          "isRequired": false,
          "type": "(e?: MouseEvent<HTMLDivElement>) => void"
        }
      ],
      "documentation": ""
    },
    {
      "name": "DataProps",
      "members": [
        {
          "name": "listSource",
          "documentation": "ListSource Data.",
          "isRequired": false,
          "type": "ListItem[] | ReactNode[]"
        },
        {
          "name": "listItemStyle",
          "documentation": "`listItemStyle` will applied to all listItem.",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "onChooseItem",
          "documentation": "onChoose ListItem `callback`.",
          "isRequired": false,
          "type": "(itemIndex?: number) => void"
        },
        {
          "name": "defaultFocusListIndex",
          "documentation": "default focus List Item by `Index`.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "background",
          "documentation": "Set Custom Background.",
          "isRequired": false,
          "type": "string"
        }
      ],
      "documentation": ""
    },
    {
      "name": "ListViewProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ListViewState",
      "members": [
        {
          "name": "focusIndex",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        }
      ],
      "documentation": ""
    },
    {
      "documentation": "",
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "documentation": "",
      "type": "() => void"
    },
    {
      "name": "ListView",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    onChooseItem: emptyFunc\n  }",
          "documentation": "",
          "type": "ListViewProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    focusIndex: this.props.defaultFocusListIndex\n  }",
          "documentation": "",
          "type": "ListViewState"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: any; }"
        },
        {
          "name": "rootElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "componentWillReceiveProps",
          "documentation": "",
          "type": "(nextProps: ListViewProps) => void"
        },
        {
          "name": "getItemNode",
          "initializerText": " (itemNode: any, index: number, disabled?: boolean, focus?: boolean, style?: React.CSSProperties, onClick?: () => void) => {\n    const styles = getStyles(this);\n    const { theme } = this.context;\n    const { onChooseItem, background } = this.props;\n    const { focusIndex } = this.state;\n    const { isDarkTheme } = theme;\n    const isFocus = focus || focusIndex === index;\n    const defaultBG = isFocus ? theme.listAccentLow : \"none\";\n    const focusBG = isFocus ? theme.listAccentHigh : (theme.useFluentDesign ? theme.acrylicTexture40.background : theme.listLow);\n    const clickBG = isFocus ? theme.accent : theme.chromeHigh;\n    return (\n      <div\n        style={theme.prefixStyle({\n          background: defaultBG,\n          color: disabled ? theme.baseLow : theme.baseHigh,\n          ...styles.item,\n          ...style\n        })}\n        key={`${index}`}\n        onClick={onClick}\n        onMouseEnter={disabled ? void(0) : (e) => {\n          e.currentTarget.style.background = focusBG;\n        }}\n        onMouseLeave={disabled ? void(0) : (e) => {\n          e.currentTarget.style.background = defaultBG;\n        }}\n        onMouseDown={disabled ? void(0) : (e) => {\n          this.setState({ focusIndex: index });\n          for (const vendor of vendors) {\n            e.currentTarget.style[`${vendor}Transform` as any] = \"scale(0.99)\";\n          }\n          onChooseItem(index);\n          e.currentTarget.style.transform = \"scale(0.99)\";\n          e.currentTarget.style.background = clickBG;\n        }}\n        onMouseUp={disabled ? void(0) : (e) => {\n          for (const vendor of vendors) {\n            e.currentTarget.style[`${vendor}Transform` as any] = \"scale(1)\";\n          }\n          e.currentTarget.style.transform = \"scale(1)\";\n          e.currentTarget.style.background = defaultBG;\n        }}\n      >\n        {itemNode}\n      </div>\n    );\n  }",
          "documentation": "",
          "type": "(itemNode: any, index: number, disabled?: boolean, focus?: boolean, style?: CSSProperties, onClic..."
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "documentation": "",
      "type": "(listView: ListView) => { root?: CSSProperties; item?: CSSProperties; }"
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/ListView/index\""
}