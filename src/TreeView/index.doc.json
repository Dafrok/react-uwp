{
  "fileName": "D:/react-uwp/src/TreeView/index.tsx",
  "name": "\"D:/react-uwp/src/TreeView/index\"",
  "exports": [
    {
      "name": "TreeItem",
      "documentation": ""
    },
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "TreeViewProps",
      "documentation": ""
    },
    {
      "name": "TreeViewState",
      "documentation": ""
    },
    {
      "name": "TreeView",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "TreeView"
      ]
    }
  ],
  "members": [
    {
      "name": "TreeItem",
      "members": [
        {
          "name": "title",
          "documentation": "Set TreeView item title.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "titleNode",
          "documentation": "Set TreeView ReactNode to item title.",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "disabled",
          "documentation": "Disabled TreeView item.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "visited",
          "documentation": "Init Item is `Visited`,only effective for the first loaded.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "expanded",
          "documentation": "Set Item is expanded.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "focus",
          "documentation": "Init Item is `Focus`,only effective for the first loaded.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "hidden",
          "documentation": "Hidden TreeView item.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "children",
          "documentation": "Set TreeView Children.",
          "isRequired": false,
          "type": "TreeItem[]"
        },
        {
          "name": "style",
          "documentation": "Set TreeView item init style.",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "hoverStyle",
          "documentation": "Set TreeView item hovered style.",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "onClick",
          "documentation": "Set TreeView item onclick callback.",
          "isRequired": false,
          "type": "(e: MouseEvent) => void"
        }
      ],
      "documentation": ""
    },
    {
      "name": "DataProps",
      "members": [
        {
          "name": "listSource",
          "documentation": "Set TreView data source.",
          "isRequired": false,
          "type": "TreeItem[] | string[]"
        },
        {
          "name": "iconDirection",
          "documentation": "Set TreView icon direction.",
          "isRequired": false,
          "type": "\"left\" | \"right\""
        },
        {
          "name": "itemHeight",
          "documentation": "Set TreView item height.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "itemPadding",
          "documentation": "Set TreView item padding.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "iconPadding",
          "documentation": "Set TreView icon padding.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "onChooseTreeItem",
          "documentation": "onChoose Tree item callback.",
          "isRequired": false,
          "type": "(listItem: TreeItem) => void"
        },
        {
          "name": "headerIcon",
          "documentation": "Set Tree header item icon.",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "itemIcon",
          "documentation": "Set Tree item children icon.",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "background",
          "documentation": "Set TreeView custom background.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "showFocus",
          "documentation": "Set first loaded show focus item ro not.",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "name": "TreeViewProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "TreeViewState",
      "members": [
        {
          "name": "init",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "chooseTreeItem",
          "documentation": "",
          "isRequired": false,
          "type": "TreeItem"
        }
      ],
      "documentation": ""
    },
    {
      "documentation": "",
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "documentation": "",
      "type": "() => void"
    },
    {
      "name": "TreeView",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    listSource: [],\n    itemHeight: 28,\n    iconPadding: 2,\n    iconDirection: \"left\",\n    onChooseTreeItem: emptyFunc,\n    showFocus: true,\n    background: \"none\"\n  }",
          "documentation": "",
          "type": "TreeViewProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    init: true\n  }",
          "documentation": "",
          "type": "TreeViewState"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: any; }"
        },
        {
          "name": "setChooseItem",
          "initializerText": " (chooseTreeItem: TreeItem) => {\n    const { onChooseTreeItem, listSource } = this.props;\n    if (this.state.chooseTreeItem && chooseTreeItem !== this.state.chooseTreeItem) {\n      this.state.chooseTreeItem.visited = false;\n    }\n    chooseTreeItem.visited = true;\n    if (chooseTreeItem.children) {\n      chooseTreeItem.expanded = !chooseTreeItem.expanded;\n    }\n    this.setState({ chooseTreeItem, init: false });\n    this.props.onChooseTreeItem(chooseTreeItem);\n  }",
          "documentation": "",
          "type": "(chooseTreeItem: TreeItem) => void"
        },
        {
          "name": "renderTree",
          "initializerText": " (): React.ReactNode => {\n    const { theme } = this.context;\n    const { prefixStyle } = theme;\n    const {\n      iconDirection,\n      showFocus,\n      itemHeight,\n      iconPadding,\n      itemPadding,\n      headerIcon,\n      itemIcon,\n      listSource\n    } = this.props;\n\n    const { init, chooseTreeItem } = this.state;\n    const styles = getStyles(this);\n\n    const renderList = ((item: TreeItem, index: number, isChild?: boolean, prevIndexArray: number[] = []): React.ReactNode => {\n      const indexArray = prevIndexArray.concat(index);\n      if (typeof item === \"string\" || typeof item === \"number\") {\n        let lastIndex: number = indexArray.splice(-1)[0];\n        let itemParent: any = listSource;\n        for (const numb of indexArray) {\n          itemParent = itemParent.children ? itemParent.children[numb] : itemParent[numb];\n        }\n        const newData = { title: item };\n        if (itemParent.children) {\n          itemParent.children[lastIndex as any] = newData;\n        } else {\n          itemParent[lastIndex as any] = newData;\n        }\n        item = newData;\n      }\n      let {\n        title,\n        titleNode,\n        expanded,\n        disabled,\n        visited,\n        focus,\n        children,\n        hidden,\n        onClick,\n        style,\n        hoverStyle\n      } = item;\n      titleNode = title || titleNode;\n      const haveChild = Array.isArray(children) && children.length !== 0;\n      const isRight = iconDirection === \"right\";\n      const isVisited = (visited && !haveChild) || (visited && init);\n\n      return hidden ? null : (\n        <div\n          style={{\n            paddingLeft: isChild ? (isRight ? itemHeight / 2.8 : itemPadding || itemHeight * 2 / 3) : void 0\n          }}\n          key={`${index}`}\n        >\n          <div\n            style={theme.prefixStyle({\n              color: disabled ? theme.baseLow : void 0,\n              ...styles.title\n            })}\n            onMouseEnter={disabled ? void 0 : e => {\n              Object.assign((e.currentTarget.children[0] as HTMLDivElement).style, hoverStyle);\n              const bgNode = e.currentTarget.parentElement.querySelector(\".react-uwp-tree-view-bg\") as HTMLDivElement;\n              Object.assign(bgNode.style, {\n                background: isVisited ? theme.accent : theme.baseLow\n              } as CSSStyleDeclaration);\n            }}\n            onMouseLeave={disabled ? void 0 : e => {\n              Object.assign((e.currentTarget.children[0] as HTMLDivElement).style, style);\n              const bgNode = e.currentTarget.parentElement.querySelector(\".react-uwp-tree-view-bg\") as HTMLDivElement;\n              Object.assign(bgNode.style, {\n                background: isVisited ? theme.listAccentLow : \"none\"\n              } as CSSStyleDeclaration);\n            }}\n          >\n            <div\n              onClick={disabled ? void 0 : (e) => {\n                if (onClick) onClick(e as any);\n                this.setChooseItem(item);\n              }}\n              style={{\n                cursor: disabled ? \"not-allowed\" : \"pointer\",\n                paddingLeft: haveChild ? iconPadding : itemHeight / 8,\n                fontSize: itemHeight / 2.25,\n                height: \"100%\",\n                lineHeight: `${itemHeight}px`,\n                ...styles.titleNode,\n                ...style\n              }}\n            >\n              {titleNode}\n            </div>\n            {haveChild ? headerIcon : itemIcon}\n            {(headerIcon || itemIcon ? (headerIcon && itemIcon) : true) && haveChild && (\n              <Icon\n                onClick={disabled ? void 0 : (e) => {\n                  this.setChooseItem(item);\n                }}\n                style={prefixStyle({\n                  cursor: disabled ? \"not-allowed\" : \"pointer\",\n                  color: disabled ? theme.baseLow : void 0,\n                  fontSize: itemHeight / 2,\n                  lineHeight: `${itemHeight / 2}px`,\n                  width: itemHeight / 2,\n                  height: itemHeight / 2,\n                  flex: \"0 0 auto\",\n                  zIndex: 1,\n                  transform: `rotateZ(${expanded ? \"-180deg\" : (isRight ? \"0deg\" : \"-90deg\")})`\n                })}\n              >\n                ScrollChevronDownLegacy\n              </Icon>\n            )}\n            <div\n              onClick={disabled ? void 0 : (e) => {\n                if (onClick) onClick(e as any);\n                this.setChooseItem(item);\n              }}\n              style={prefixStyle({\n                cursor: disabled ? \"not-allowed\" : \"pointer\",\n                transition: \"all 0.25s\",\n                zIndex: 0,\n                background: (focus && showFocus) ? theme.accent : (\n                  isVisited ? theme.listAccentLow : \"none\"\n                ),\n                ...styles.bg\n              } as any)}\n              className=\"react-uwp-tree-view-bg\"\n            />\n          </div>\n          {haveChild && (\n            <div\n              style={theme.prefixStyle({\n                height: \"auto\",\n                overflow: expanded ? void 0 : \"hidden\",\n                opacity: expanded ? 1 : 0,\n                transform: `translateY(${expanded ? 0 : -10 }px)`,\n                transformOrigin: \"top\",\n                transition: \"all .25s\"\n              })}\n            >\n              {expanded && children.map((item: TreeItem[], index: number) => renderList(item, index, true, indexArray))}\n            </div>\n          )}\n        </div>\n      );\n    });\n\n    return (listSource as any).map((list: any, index: number) => renderList(list, index));\n  }",
          "documentation": "",
          "type": "() => ReactNode"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "documentation": "",
      "type": "(treeView: TreeView) => { root?: CSSProperties; title?: CSSProperties; titleNode?: CSSProperties;..."
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/TreeView/index\""
}